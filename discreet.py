class PropositionalLogicRules:
    def __init__(self):
        self.rules = [
            ("p ∧ True", "p"),
            ("p ∨ False", "Identity"),
            ("p ∨ True", "True"),
            ("p ∧ False", "Domination"),
            ("p ∧ p", "p"),
            ("p ∨ p", "Idempotence"),
            ("¬(¬p)", "p"),
            ("p ∨ ¬p", "True"),
            ("p ∧ ¬p", "False"),
            ("p ∨ (p ∧ q)", "p"),
            ("p ∧ (p ∨ q)", "Absorption"),
            ("¬p ∧ q ↔ ¬p ∨ ¬q", "De Morgan’s Laws"),
            ("¬p ∨ q ↔ ¬p ∧ ¬q", "De Morgan’s Laws"),
            ("(p → q) ↔ (¬p ∨ q)", "Implication Identity"),
            ("The converse of p → q is q → p", "It does not necessarily have the same truth value"),
            ("The inverse of p → q is ¬p → ¬q", "It does not necessarily have the same truth value"),
            ("The contrapositive of p → q is ¬q → ¬p", "It always has the same truth value"),
            ("p → q", "Conditional Proposition (Implication)"),
            ("p ↔ q", "Biconditional Proposition"),
            ("p ∨ q ↔ q ∨ p", "Commutativity"),
            ("p ∧ q ↔ q ∧ p", "Commutativity"),
            ("(p ∨ q) ∨ r ↔ p ∨ (q ∨ r)", "Associativity"),
            ("(p ∧ q) ∧ r ↔ p ∧ (q ∧ r)", "Associativity"),
            ("p ∨ (q ∧ r) ↔ (p ∨ q) ∧ (p ∨ r)", "Distributivity"),
            ("p ∧ (q ∨ r) ↔ (p ∧ q) ∨ (p ∧ r)", "Distributivity"),
            ("[(p → q) ∧ p] → q", "Modus Ponens"),
            ("[(¬q → ¬p) ∧ q] → p", "Modus Tollens"),
            ("If a proposition cannot be false, it must be true.", "Contradiction"),
            ("(¬p → False) → p", "Additional Proposition"),
            ("𝑝 → 𝑞 ∧ 𝑞 → 𝑟 → 𝑝 → 𝑟", "Syllogism"),
            ("𝑝 ∧ 𝑞 → (𝑝 ∧ 𝑞)", "Conjunction"),
            ("𝑝 ∧ 𝑞 → 𝑝", "Conjunctive Simplification"),
            ("𝑝 ∨ 𝑞 ∧ ¬𝑝 → 𝑞", "Disjunctive Syllogism"),
            ("𝑝 → 𝑝 ∨ 𝑞", "Disjunctive Amplification"),
            ("𝑝 → 𝑟 ∧ 𝑞 → 𝑟 ∧ 𝑝 ∨ 𝑞 → 𝑟", "Proof by Cases (Alternately)"),
            ("𝑝 → 𝑞 ∧ 𝑟 → 𝑠 ∧ 𝑝 ∨ 𝑟 → 𝑞 ∨ 𝑠", "Constructive Dilemma"),
            ("𝑝 → 𝑞 ∧ 𝑟 → 𝑠 ∧ ¬𝑞 ∨ ¬𝑠 → ¬𝑝 ∨ ¬𝑟", "Destructive Dilemma"),
            ("𝑝 ∨ 𝑞 ∧ ¬𝑝 ∨ 𝑟 → 𝑞 ∨ 𝑟", "Resolution"),
            ("𝑝 → 𝑞 ∧ ¬𝑝 → 𝑟 → 𝑞 ∨ 𝑟", "Resolution (Alternately)"),
            ("𝑝 𝑥 = \"7 divides evenly into (x + 4)\"", ""), ("𝑝 3 ↔ 𝐓", ""), ("𝑝 4 ↔ 𝐅", ""),
            ("∃: For some or, more properly, there exist(s)", ""),
            ("∀: For all", ""),
            ("∋: Such that (not always used)", ""),
            ("Quantifiers give us a few new rules of inference we can use:", ""),
            ("∃𝑥 ∋ 𝑝 𝑥 ∧ 𝑞 𝑥 → ∃𝑥 ∋ 𝑝 𝑥 ∧ ∃𝑥 ∋ 𝑞 𝑥", ""),
            ("∃𝑥 ∋ 𝑝 𝑥 ∨ 𝑞 𝑥 ↔ ∃𝑥 ∋ 𝑝 𝑥 ∨ ∃𝑥 ∋ 𝑞 𝑥", ""),
            ("∀𝑥, 𝑝 𝑥 ∧ 𝑞 𝑥 ↔ ∀𝑥, 𝑝 𝑥 ∧ ∀𝑥, 𝑞 𝑥", ""),
            ("∀𝑥, 𝑝 𝑥 ∨ ∀𝑥, 𝑞 𝑥 → ∀𝑥, 𝑝 𝑥 ∨ 𝑞 𝑥", ""),
            ("If something is true for all possible values, it is true for any possible value.", "Universal Specification"),
        ]

        self.explanations = [
            "Conjunction with True is always the same as the original value.",
            "Disjunction with False is always the same as the original value.",
            "Disjunction with True is always True.",
            "Conjunction with False is always False.",
            "Conjunction with itself is always the same as the original value.",
            "Disjunction with itself is always the same as the original value.",
            "Double negation simplifies to the original value.",
            "Law of Excluded Middle: p or not p is always True.",
            "Law of Non-Contradiction: p and not p is always False.",
            "Distributive property of disjunction over conjunction.",
            "Absorption property: a common term in a conjunction is absorbed by the disjunction.",
            "De Morgan’s Laws: Conjunction of negated terms is the same as the negation of the disjunction.",
            "De Morgan’s Laws: Disjunction of negated terms is the same as the negation of the conjunction.",
            "Implication Identity: p implies q is equivalent to not p or q.",
            "Converse of an implication may not have the same truth value.",
            "Inverse of an implication may not have the same truth value.",
            "Contrapositive of an implication always has the same truth value.",
            "Conditional Proposition (Implication): p implies q.",
            "Biconditional Proposition: p if and only if q (p ↔ q).",
            "Commutativity of disjunction: p or q is equivalent to q or p.",
            "Commutativity of conjunction: p and q is equivalent to q and p.",
            "Associativity of disjunction: The grouping of disjunctions doesn't matter.",
            "Associativity of conjunction: The grouping of conjunctions doesn't matter.",
            "Distributivity of disjunction over conjunction.",
            "Distributivity of conjunction over disjunction.",
            "Modus Ponens: If p implies q and p is true, then q must be true.",
            "Modus Tollens: If ¬q implies ¬p and q is true, then p must be true.",
            "If a proposition cannot be false, it must be true.",
            "Syllogism: If p implies q and q implies r, then p must imply r.",
            "Conjunction: If two propositions are true, then their conjunction must be true.",
            "Conjunctive Simplification: If the conjunction of two propositions is true, each of those propositions must be true.",
            "Disjunctive Syllogism: If the disjunction of two propositions is true and one of those propositions is false, the other must be true.",
            "Disjunctive Amplification: If a proposition is true, its disjunction with any other proposition must be true.",
             "Proof by Cases: If two propositions both imply a conclusion, their disjunction implies that conclusion.",
            "Proof by Cases (Alternately): If two propositions both imply a conclusion, their disjunction implies that conclusion.",
            "Constructive Dilemma: Given two implications, if the disjunction of their premises is true, the disjunction of their consequences must be true.",
            "Destructive Dilemma: Given two implications, if at least one of their consequences is false, at least one of their premises must be false.",
            "Resolution: If a proposition implies a conclusion and its negation implies another conclusion, one of those conclusions must be true.",
            "Resolution (Alternately): If a proposition implies a conclusion and its negation implies another conclusion, one of those conclusions must be true.",
            "An open proposition is a proposition that contains a variable, and becomes a testable proposition when that variable is replaced with a value.",
            "∃: For some or, more properly, there exist(s)",
            "∀: For all",
            "∋: Such that (not always used)",
            "NOTE THAT THE FIRST AND FOURTH OF THESE ARE ONE-WAY IMPLICATIONS",
            "∃𝑥 ∋ 𝑝 𝑥 ∧ 𝑞 𝑥 → ∃𝑥 ∋ 𝑝 𝑥 ∧ ∃𝑥 ∋ 𝑞 𝑥",
            "∃𝑥 ∋ 𝑝 𝑥 ∨ 𝑞 𝑥 ↔ ∃𝑥 ∋ 𝑝 𝑥 ∨ ∃𝑥 ∋ 𝑞 𝑥",
            "∀𝑥, 𝑝 𝑥 ∧ 𝑞 𝑥 ↔ ∀𝑥, 𝑝 𝑥 ∧ ∀𝑥, 𝑞 𝑥",
            "∀𝑥, 𝑝 𝑥 ∨ ∀𝑥, 𝑞 𝑥 → ∀𝑥, 𝑝 𝑥 ∨ 𝑞 𝑥",
            "∀𝑥, 𝑝 𝑥 → 𝑝 𝑎 for any and every a in x’s universe.",
        ]


    def print_all_rules(self):
        for rule, explanation in zip(self.rules, self.explanations):
            print(f"{rule} : {explanation}")

# Create an instance of the PropositionalLogicRules class
propositional_logic_rules = PropositionalLogicRules()

# Print all rules with explanations
propositional_logic_rules.print_all_rules()
